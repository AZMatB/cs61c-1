University of California, Berkeley
College of Engineering
Department of Electrical Engineering and Computer Science

Daniel Nakashima - cs61c-hi
TA eric liang
sec FRI 1-3 PM
id# 23118140


CS 61C, Spring 2012 HW 3
TA: Alan Christopher
Due Sunday, February 05, 2011 @ 11:59pm


1.	Convert the following hex numbers into decimal.
		a.0x12345678
		0001 0010 0011 0100 0101 0110 0111 1000
		leading bit is 0 => positive number
		305419896
		
		b.0xBEADF00D
		leading bit b => 1011 in binary => leading bit is 1 => negative number
		
		1011 1110 1010 1101 1111 0000 0000 1101 => invert
		0100 0001 0101 0010 0000 1111 1111 0010 => add 1
		0100 0001 0101 0010 0000 1111 1111 0011 => 0x41520FF3
		41520FF3 => 1095897075
		
		-1095897075
		

2.	Convert the binary fraction .1101 to a decimal fraction. What is 1/3 as a binary fraction?
	0.5 + 0.25 + 0*.125 + 0.0625 = 0.1825 d ;
	
	1/3 can be approximated as an alternating sequence of 1's and zero's i.e. 0.0101...01
	so taken out to a byte can be apx as 0 + 0.25 + 0 + 1.25 = 0.3125 =apx= 0.3333...3
	

3.	Show how the data in 0x12345678 would be arranged in memory of a little endian machine and a big endian machine. Assume that the data is stored starting at address 0x0.
//	assuming 32 bit addresses
a.	little endian
	78		a+0
	56		a+1
	34		a+2
	12		a+3
	
b.	big endian
	12		a+0
	34		a+1
	56		a+2
	78		a+3



4.	What MIPS assembly code corresponds to the C code
	f = -g + h + B[1];
	
//===============================================================================================================
	SUB 	$s0, $s2, $s1		//f = -g + h => f = h-g
	LW		$t0, 4(B)			//store the 1st byte in array B with offset of 4*1 in temp
	ADD 	$s0, $s0, $t0 		//add temp and store in f
//===============================================================================================================
	
	f = $s0
	g = $s1
	h = $s2
	B = $s7		(base addr)
Assume f,g,h are assigned to $s0,$s1,$s2 and that the base address of B is in $s7.

f = $s0
g = $s1
h = $s2
b = $s7

5.	What C code corresponds to the MIPS assembly code
	add $s0, $s0, $s1	
	add $s0, $s3, $s2	
	add $s0, $s0, $s3	
	Assume f,g,h,i are assigned to $s0,$s1,$s2,$s3.
	
	f = $s0 = 1
	g = $s1 = 2
	h = $s2 = 3
	i = $s3 = 4

	//f = f + g  => increment value in f by g 
	//f = i + h	 => place the sum of i and h in f disregarding previous stored value
	//f = f + i	 => add i AGAIN to the contents of f=i+h

	code translates to....
	f = h + i + i
	f = 2*i + h
	
	int f,g,h,i;
	
	f = f+g;
	f = i+h;
	f += i;
	

6.	Write a minimal sequence of MIPS assembly instructions that does the operation identical to
	A = B & C[0]
	//you can only 'and' two REGISTERS
	//assumes values of B and offset of C are in $s2,$s1 respectively

	addi	$s1, $zero, B	#places value B in reg s1
	lw		$t0, 0($s2)		#storage for C[0]
	and		$s0, $s1, $t0	#ands the two statements in 
	

7.	Suppose you are given the recurrence
	Tn = 2(T n-1) + T n-2 + 3(T n-3)
where T0 = 1, T1 = 1, T2 = 3. Implement a recursive function in C and MIPS that correctly computes the value of T for a given input n. Remember to follow register conventions in your MIPS code.

#testing for base cases
#====================================================================
T_top:
	stli	$t0, $a0, 3				#bool placed in t0 if a0<3 (case for 0-2)
	
	beq		$t0, $zero, RECURSE		#if not less than jump to recurse
	
	stli	$t0, $a0, 2 			#tests if branch is equal to 2
	beq		$t0,$zero,THREE			#if the return value is 2 return 3
	
	addi	$v0, $zero, 3			#return 3 if equal to 2
	j		OVER
ONE:
	addi 	$v0, $zero, 1			# else make the return value 1
OVER:
	jr 		$ra

#stack adjusting
#====================================================================	
RECURSE:
	addi	$sp, $sp, -24			#adjust stack for saving
	sw		$ra, 0($sp)				#save return address
	sw		$a0, 4($sp)				#save input n
	
#====================================================================	
TEST:
	addi	$a0, $a0, -1			#make input n-1
	jal		T_top					#send to T_top
	
	sw		$v0, 8($sp)				#save value of T(n-1)
	lw		$a0, 4($sp)				#load n value	
#====================================================================
	addi	$a0,$a0,-2				#input n-2
	jal		$T_top					#call with n-2
	
	sw		$v0, 12($sp)			#save value T(n-2)
	lw		$a0, 8($sp)				#load new n value
#====================================================================
	addi	$a0,$a0,-3				#input n-3
	jal		$T_top					#call with n-3
	
	sw		$v0, 16($sp)			#save value T(n-3)

#ACCUMULATING	
#====================================================================	

	lw		$ra,0($sp)				#load return addr
	lw		$t0, 8($sp)				#get n-1
	lw		$t1, 12($sp)			#get n-2
	lw		$t2, 16($sp)			#get n-3
	addi	$sp, $sp, 24			#pop back	
	
	addi 	$t4,$zero,2				#store constant of 2 to multiply
	mult	$t0,$t0,$t4				#multiply T(n-1)*2
	
	addi 	$t4,$zero,3				#store constant of 3 to multiply
	mult	$t2,$t2,$t4				#multiply T(n-3)*3
	
	add		$v0,$t0,$t1				#summing after multiplication
	add		$v0,$v0,$t2
	
	jr		$ra
	
	
#include <stdio.h>

int T(int n);

int main()
{
    printf("the value of T3 is:\t %d\n", T(3));
	printf("the value of T4 is:\t %d\n", T(4));
	printf("the value of T5 is:\t %d\n", T(5));

	getchar();
	return 0;
}

int T(int n)
{
	if (n<=1)	{
		return 1;
	}
	else if (n==2)	{
		return 2;
	}
	else {
		return 2*T(n-1) + T(n-2) + 3*T(n-3);
		}
}



8.	Convert the following MIPS pseudo instructions into an equivalent,minimal sequence of MIPS instructions (it's acceptable for your MIPS instructions to reference LOOP instead of a numerical offset).
	move $t1, $t2
	beq $t1, 0x17, LOOP
	
	
LOOP:	lw 		$t1,$t2
		addi	$t0, $zero, 0x17
		beq		$t1, $t0, LOOP

		